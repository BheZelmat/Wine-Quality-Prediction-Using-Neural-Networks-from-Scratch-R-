}else{return(x-(x%%1)+1)
}
}
rounding(1)
rounding<-function(x){
if(x%%1!=x){
return(x)
}else{return(x-(x%%1)+1)
}
}
rounding(1.3)
rounding<-function(x){
if(x%%1==0){
return(x)
}else{return(x-(x%%1)+1)
}
}
rounding(1.3)
rounding<-function(x){
if(x%%1==0){
return(x)
}else{return(x-(x%%1)+1)
}
}
rounding(1.8)
rounding<-function(x){
if(x%%1==0){
return(x)
}else{return(x-(x%%1)+1)
}
}
rounding(2.5)
rounding<-function(x){
if(x%%1==0){
return(x)
}else{return(x-(x%%1)+1)
}
}
rounding(2)
rounding<-function(x){
if(x%%1==0){
return(x)
}else{return(x-(x%%1)+1)
}
}
rounding(1.8)
rounding<-function(x){
if(x%%1==0){
return(x)
}else{return(x-(x%%1)+1)
}
}
rounding(1.1)
subsq.i.j<-function(sudoku,i,j){
box.row<- rounding(i/3)
box.col<- rounding(j/3)
subsq<- c()
values<-c(1:9)
k<-1
for(i in box.row*3-3:box.row*3 ){
for(j in box.col*3-3:box.col*3 )  {
subsq<-c(sudoku[i,j],k)
k<-k+1
}
}
msubsq<-matrix(subsq,nrow = 3,ncol = 3)
msubsq
}
subsq.i.j(sudoku1,4,7)
subsq.i.j(sudoku1,4,7)
subsq.i.j<-function(sudoku,i,j){
box.row<- rounding(i/3)
box.col<- rounding(j/3)
subsq<- c()
values<-c(1:9)
k<-1
for(i in box.row*3-3:box.row*3 ){
for(j in box.col*3-3:box.col*3 )  {
subsq<-c(sudoku[i,j],k)
k<-k+1
}
}
subsq
}
subsq.i.j(sudoku1,4,7)
subsq.i.j<-function(sudoku,i,j){
box.row<- rounding(i/3)
box.col<- rounding(j/3)
subsq<- c()
values<-c(1:9)
k<-1
for(j in box.row*3-3:box.row*3 ){
for(i in box.col*3-3:box.col*3 )  {
subsq<-c(sudoku[i,j],k)
k<-k+1
}
}
subsq
}
subsq.i.j(sudoku1,4,7)
subsq.i.j<-function(sudoku,i,j){
box.row<- rounding(i/3)
box.col<- rounding(j/3)
row.sec<- box.row*3-3: box.row
col.sec<- box.col*3-3: box.col
subsq<- sudoku[ row.sec,col.sec   ]
subsq
}
subsq.i.j(sudoku1,4,7)
box.row<- rounding(4/3)
box.col<- rounding(7/3)
box.row
box.row<- rounding(4/3)
box.col<- rounding(7/3)
box.row
box.col
row.sec<- box.row*3-3: box.row
row.sec
box.row<- rounding(4/3)
box.col<- rounding(7/3)
box.row
box.col
row.sec<- box.row*3-3: box.row*3
row.sec
row.sec<- ((box.row*3)-3): (box.row*3 )
row.sec
row.sec<- ((box.row*3)-2): (box.row*3 )
row.sec
box.row<- rounding(4/3)
box.col<- rounding(7/3)
box.row
box.col
row.sec<- ((box.row*3)-2): (box.row*3 )
row.sec
row.sec<- ((box.col*3)-2): (box.col*3 )
subsq<- sudoku[ row.sec,col.sec   ]
subsq
subsq.i.j<-function(sudoku,i,j){
box.row<- rounding(i/3)
box.col<- rounding(j/3)
row.sec<- ((box.row*3)-2): (box.row*3 )
row.sec<- ((box.col*3)-2): (box.*3 )
subsq<- sudoku[ row.sec,col.sec   ]
subsq
}
subsq.i.j(sudoku1,4,7)
subsq.i.j<-function(sudoku,i,j){
box.row<- rounding(i/3)
box.col<- rounding(j/3)
row.sec<- ((box.row*3)-2): (box.row*3 )
col.sec<- ((box.col*3)-2): (box.col*3 )
subsq<- sudoku[ row.sec,col.sec   ]
subsq
}
subsq.i.j(sudoku1,4,7)
showmat <- function(M){
M.r <- M[nrow(M):1,]
M.image <- t(M.r)
r <- nrow(M.image)
c <- ncol(M.image)
image(
1:r,    #scaling the x axis to match the number of rows in Mat.3
1:c,    #scaling the y axis to match the number of columns in Mat.3
M.image,  #the matrix to image
col = colorRampPalette(c("white", "red", "purple"))(r*c),
xlab = "",  #remove the x axis label
ylab = "",  #remove the y axis label
xaxt = "n", #remove the x axis text
yaxt = "n"  #remove the y axis text
)
#adding the values from the matrix to their corresponding position in the image
for(i in 1:r){
for(j in 1:c){
text(i, j, M.image[i, j])
}
}
}
showmat(sudoku1)
showmat <- function(M){
M.r <- M[nrow(M):1,]
M.image <- t(M.r)
r <- nrow(M.image)
c <- ncol(M.image)
image(
1:r,    #scaling the x axis to match the number of rows in Mat.3
1:c,    #scaling the y axis to match the number of columns in Mat.3
M.image,  #the matrix to image
xlab = "",  #remove the x axis label
ylab = "",  #remove the y axis label
xaxt = "n", #remove the x axis text
yaxt = "n"  #remove the y axis text
)
#adding the values from the matrix to their corresponding position in the image
for(i in 1:r){
for(j in 1:c){
text(i, j, M.image[i, j])
}
}
}
showmat(sudoku1)
showmat <- function(M){
M.r <- M[nrow(M):1,]
M.image <- t(M.r)
r <- nrow(M.image)
c <- ncol(M.image)
image(
1:r,    #scaling the x axis to match the number of rows in Mat.3
1:c,    #scaling the y axis to match the number of columns in Mat.3
M.image,  #the matrix to image
col = colorRampPalette(c("white"))(r*c),
xlab = "",  #remove the x axis label
ylab = "",  #remove the y axis label
xaxt = "n", #remove the x axis text
yaxt = "n"  #remove the y axis text
)
#adding the values from the matrix to their corresponding position in the image
for(i in 1:r){
for(j in 1:c){
text(i, j, M.image[i, j])
}
}
}
showmat(sudoku1)
show.puzzel<- function(M){
M.r <- M[nrow(M):1,]
M.image <- t(M.r)
r <- nrow(M.image)
c <- ncol(M.image)
image(
1:r,
1:c,
M.image,
col = colorRampPalette(c("white"))(r*c),
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n"
)
for(i in 1:r){
for(j in 1:c){
text(i, j, M.image[i, j])
}
}
}
show.puzzel(sudoku1)
i<-4
j<-7
values <- 1:9
row.i.j(sudoku1,i,j)
col.i.j(sudoku1,i,j)
subsq.i.j(sudoku1,i,j)
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(x==m.row[x]))
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(x==m.row[1:9]))
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(1:9==m.row[1:9]))
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(1==m.row[1:9]))
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(3==m.row[1:9]))
k<-1
for(x in values){
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
if(any(which(x!=m.row[1:9]))    &  any(which(x!=m.col[1:9])) &   any(which(x!=as.vector(submat)))){
possible <- c(x,k)
k<-k+1
}
}
possible
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(x!=as.vector(submat)))
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(1:9!=as.vector(submat)))
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(5!=as.vector(submat)))
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
any(which(8!=as.vector(submat)))
any(which(8!=as.vector(submat)))
as.vector(submat)
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
submat<- subsq.i.j(sudoku1,i,j)
as.vector(submat)
any(which(1!=as.vector(submat)))
which(1!=as.vector(submat))
which(values!=as.vector(submat))
which(values==as.vector(submat))
in.vec(1,m.row)
in.vec<-function(x,v){
flag<-FALSE
for (i in v) {
if(v[i]==x){flag<-TRUE
break
}
}
return(flag)
}
in.vec(1,m.row)
in.vec(1,m.row)
in.vec<-function(x,v){
flag<-FALSE
for (i in v) {
if(v[i]==x){flag<-TRUE
break
}
}
return(flag)
}
in.vec(1,m.row)
k<-1
for(x in values){
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
in.vec(1,m.row)
in.vec<-function(x,v){
flag<-FALSE
for (i in 1:length(v)) {
if(v[i]==x){
flag<-TRUE
break
}
}
return(flag)
}
in.vec(1,m.row)
in.vec<-function(x,v){
flag<-FALSE
for (i in 1:length(v)) {
if(v[i]==x){
flag<-TRUE
break
}
}
return(flag)
}
in.vec(1,m.row)
k<-1
for(x in values){
m.row<-row.i.j(sudoku1,i,j)
m.col<-col.i.j(sudoku1,i,j)
in.vec(1,m.row)
in.vec<-function(x,v){
flag<-FALSE
for (i in 1:length(v)) {
if(v[i]==x){
flag<-TRUE
break
}
}
return(flag)
}
m.row<-row.i.j(sudoku1,i,j)
in.vec(1,m.row)
data <- read.csv("wine.csv")
setwd("C:/Users/asus/Desktop/NN from scratch in R")
library(tidyverse)
setwd("C:/Users/asus/Desktop/NN from scratch in R")
source("NN_functions.R")
data <- read.csv("wine.csv")
data.dim
dim(data)
sum(na(data))
View(data)
dim(data)
index.classification column<-ncol(data)
index.classification.column<-ncol(data)
# scale the data
type.of.wine       <- data[,index.classification.column]
data.temp          <- data[,-index.classification.column]
data.temp          <- apply(data.temp,2,rescale,to=c(0,1))
data               <- cbind.data.frame(data.temp, type)
types <- sort(  unique(  pull(  data, index.classification.column  )  )  )
types
types.wine <- sort(  unique(  pull(  data, index.classification.column  )  )  )
types.wine
# rename classification column to "class"
names(data)[ncol(data)] = "class"
# rename classification column to "class"
names(data)[ncol(data)] = "class"
View(data)
index1   <- sample(1:nrow(data), size = 0.2*nrow(data))
training <- data[-index1,]
testing  <- data[index1,]
training <- training[sample(1:nrow(training), nrow(training)),]
ggplot(stack(training[,1:(ncol(training)-1)]), aes(x = ind, y = values)) +
geom_boxplot()
data.temp          <- apply(data.temp,2,rescale,to=c(0,1))
# scaling function
rescale <- function(x, to = c(0, 1)) {
# Extract the min and max of the new scale
min_to <- min(to)
max_to <- max(to)
# Scale the data
x_std <- (x - min(x)) / (max(x) - min(x))
x_scaled <- x_std * (max_to - min_to) + min_to
return(x_scaled)
}
data <- read.csv("wine.csv")
dim(data)
View(data)
index.classification.column<-ncol(data)
# scale the data
type.of.wine       <- data[,index.classification.column]
data.temp          <- data[,-index.classification.column]
data.temp          <- apply(data.temp,2,rescale,to=c(0,1))
data               <- cbind.data.frame(data.temp, type)
types.wine <- sort(  unique(  pull(  data, index.classification.column  )  )  )
# scale the data
type.of.wine       <- data[,index.classification.column]
data.temp          <- data[,-index.classification.column]
data.temp          <- apply(data.temp,2,rescale,to=c(0,1))
data               <- cbind.data.frame(data.temp, type.of.wine)
types.wine <- sort(  unique(  pull(  data, index.classification.column  )  )  )
types.wine
# rename classification column to "class"
names(data)[ncol(data)] = "class"
View(data)
index1   <- sample(1:nrow(data), size = 0.2*nrow(data))
training <- data[-index1,]
testing  <- data[index1,]
training <- training[sample(1:nrow(training), nrow(training)),]
ggplot(stack(training[,1:(ncol(training)-1)]), aes(x = ind, y = values)) +
geom_boxplot()
ggplot(stack(training[,1:(ncol(training)-1)]), aes(x = ind, y = values)) +
geom_boxplot()
ggplot(stack(testing[,1:(ncol(training)-1)]), aes(x = ind, y = values)) +
geom_boxplot()
ggplot(stack(training[,1:(ncol(training)-1)]), aes(x = ind, y = values)) +
geom_boxplot() +
labs(title = "Distributions of Training set",
x = "features",
y = "distribution",
caption = "Caption Text")
ggplot(stack(testing[,1:(ncol(testing)-1)]), aes(x = ind, y = values)) +
geom_boxplot()+
labs(title = "Distributions of Testing set",
x = "Features",
y = "Distribution",
caption = "Caption Text")
classCol            <- ncol(data)
types               <- sort(unique(pull(data,classCol)))
M                   <- classCol - 1
numberOfTypes       <- length( unique( pull(data,classCol) ) )
types               <- sort(unique(pull(data, classCol)))
N                   <- c(M,2*M,2*M,2*M,numberOfTypes)
AF.chosen           <- c(1,3,2,2,4)
lossFunctionChosen  <- 2
loss                <- LF[[lossFunctionChosen]]
step                <- 0.01
epochs              <- 100
parameters <- initialize.parameters(N,0.5)
es<-c()
epochlosses<-c()
for(e in 1:epochs){
losses <- c()
for(row in 1:nrow(training) ){
input      <- matrix(as.numeric(training[row,1:M]), nrow = M)
known      <- matrix(one.hot.convert(types, pull(training, classCol)[row] ), nrow = numberOfTypes)
fPass      <- fwd.pass(input, parameters, AF.chosen)
grads      <- back.propagation(fPass, parameters, AF.chosen, lossFunctionChosen, known)
parameters <- updateParameters(parameters, grads, step)
losses     <- c(losses,loss(fPass$A[[5]], known))
print(paste0("epoch: ", e, " row:, ",row))
}
epochLoss <- mean(losses)
es<-c(es,e)
epochlosses<-c(epochlosses,epochLoss)
#points(e,epochLoss)
}
ggplot(data=rbind(es,epochlosses),aes(es,epochLoss))
ggplot(data=rbind(es,epochlosses),aes(es,epochLoss))
testNet(training)
testNet(testing)
testNet(data)
write.csv(data, "smotedData.csv")
ggplot(data=rbind(es,epochlosses),aes(es,epochLoss))
testNet(training)
testNet(testing)
testNet(data)
testing
testNet(testing)
# Convert epoch losses to a data frame for ggplot
epoch_data <- data.frame(epoch = es, epoch_loss = epochlosses)
# Plotting the epoch loss
ggplot(epoch_data, aes(x = epoch, y = epoch_loss)) +
geom_line() +  # Use geom_line for a line plot
labs(title = "Training Loss per Epoch",
x = "Epoch",
y = "Average Loss") +
theme_minimal()
training.accuracy<-testNet(training)
